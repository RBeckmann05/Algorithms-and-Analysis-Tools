#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Indicators in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Indicators.BeckFlows
{
	public class InsitutionalDelta : Indicator
	{
		double delta, cumulativeDelta = 0;
		List<double> cDeltaList = new List<double>();
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Indicator here.";
				Name										= "InsitutionalDelta";
				Calculate									= Calculate.OnBarClose;
				IsOverlay									= false;
				DisplayInDataBox							= true;
				DrawOnPricePanel							= true;
				DrawHorizontalGridLines						= true;
				DrawVerticalGridLines						= true;
				PaintPriceMarkers							= true;
				ScaleJustification							= NinjaTrader.Gui.Chart.ScaleJustification.Right;
				//Disable this property if your indicator requires custom values that cumulate with each new market data event. 
				//See Help Guide for additional information.
				IsSuspendedWhileInactive					= true;
				
				sizeFilter									= 20;
				AddPlot(Brushes.White, "deltaPlot");
				AddPlot(Brushes.White, "zeroPlot");
			}
			else if (State == State.Configure)
			{
				AddVolumetric(null, BarsPeriodType.Second, 30, VolumetricDeltaType.BidAsk, 1, sizeFilter, Bars.TradingHours.Name, true);
			}
		}

		protected override void OnBarUpdate()
		{
			#region Data Check and Volumetric Setup
			if (CurrentBars[0] < 2 || CurrentBars[1] < 2)
				return;
			NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType barsType = BarsArray[1].BarsType as 
			NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType;
			#endregion
			
			if (BarsInProgress == 0 && Bars.IsFirstBarOfSession)
			{
				cumulativeDelta = 0;
				cDeltaList.Clear();
			}
			
			if (BarsInProgress == 1)
			{
				delta = barsType.Volumes[CurrentBars[1]].BarDelta;
				cumulativeDelta = cumulativeDelta + delta;
			}
			
			if (BarsInProgress == 0)
			{
				cDeltaList.Add(cumulativeDelta);
				deltaPlot[0] = cumulativeDelta;
				zeroPlot[0] = 0;
				if (cDeltaList.Count() > 3)
				{
					if (cDeltaList[cDeltaList.Count()-1] > cDeltaList[cDeltaList.Count()-2])
						PlotBrushes[0][0] = Brushes.Green;
					else if (cDeltaList[cDeltaList.Count()-1] < cDeltaList[cDeltaList.Count()-2])
						PlotBrushes[0][0] = Brushes.Red;
					else
						PlotBrushes[0][0] = PlotBrushes[0][1];
				}
			}
				
			
		}
		
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="sizeFilter", Order=1, GroupName="Set Defaults")]
		public int sizeFilter
		{ get; set; }
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> deltaPlot
		{
			get { return Values[0]; }
		}
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> zeroPlot
		{
			get { return Values[1]; }
		}
	}
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private BeckFlows.InsitutionalDelta[] cacheInsitutionalDelta;
		public BeckFlows.InsitutionalDelta InsitutionalDelta(int sizeFilter)
		{
			return InsitutionalDelta(Input, sizeFilter);
		}

		public BeckFlows.InsitutionalDelta InsitutionalDelta(ISeries<double> input, int sizeFilter)
		{
			if (cacheInsitutionalDelta != null)
				for (int idx = 0; idx < cacheInsitutionalDelta.Length; idx++)
					if (cacheInsitutionalDelta[idx] != null && cacheInsitutionalDelta[idx].sizeFilter == sizeFilter && cacheInsitutionalDelta[idx].EqualsInput(input))
						return cacheInsitutionalDelta[idx];
			return CacheIndicator<BeckFlows.InsitutionalDelta>(new BeckFlows.InsitutionalDelta(){ sizeFilter = sizeFilter }, input, ref cacheInsitutionalDelta);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.BeckFlows.InsitutionalDelta InsitutionalDelta(int sizeFilter)
		{
			return indicator.InsitutionalDelta(Input, sizeFilter);
		}

		public Indicators.BeckFlows.InsitutionalDelta InsitutionalDelta(ISeries<double> input , int sizeFilter)
		{
			return indicator.InsitutionalDelta(input, sizeFilter);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.BeckFlows.InsitutionalDelta InsitutionalDelta(int sizeFilter)
		{
			return indicator.InsitutionalDelta(Input, sizeFilter);
		}

		public Indicators.BeckFlows.InsitutionalDelta InsitutionalDelta(ISeries<double> input , int sizeFilter)
		{
			return indicator.InsitutionalDelta(input, sizeFilter);
		}
	}
}

#endregion
