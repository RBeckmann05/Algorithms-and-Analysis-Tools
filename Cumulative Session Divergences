#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Indicators in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Indicators.BeckFlows
{
	public class CumulativeDivergences : Indicator
	{
		
		#region Declatrations
		List<double> prevPlotValues = new List<double>();
		List<double> longPrevPlotValues = new List<double>();
		List<double> shortPrevPlotValues = new List<double>();
		List<double> prevCumulativeDeltaValues = new List<double>();
		
		double delta = 0;
		int cumulativeDivergences = 0;
		int countSessionBars = 0;
		int saveSessionCount = 0;
		double expectedDivergencePct = 0;
		double outcome = 0;
		double shortOutcome = 0;
		double longOutcome = 0;
		double cumulativeDelta = 0;
		double deltaVector = 0;
		double adjustedVolume = 0;
		double adjustedCumulativeVolume = 0;
		double cumulativeVolume = 0;
		double deltaPercent = 0;
		double sessionDivergenceValue = 0;
		
		bool isUpBar = false;
		bool isDownBar = false;
		bool isDoji = false;
		
		bool isPosDelta = false;
		bool isNegDelta = false;
		
		int i = 0;
		int tracker = 0;
		int loadedBars = 0;
		int loadedDivergences = 0;
		int lockCount = 0;
		#endregion
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Cumulative delta diverginces throughout a session";
				Name										= "CumulativeDivergences";
				Calculate									= Calculate.OnBarClose;
				IsOverlay									= false;
				DisplayInDataBox							= true;
				DrawOnPricePanel							= true;
				DrawHorizontalGridLines						= true;
				DrawVerticalGridLines						= true;
				PaintPriceMarkers							= true;
				ScaleJustification							= NinjaTrader.Gui.Chart.ScaleJustification.Right;
				//Disable this property if your indicator requires custom values that cumulate with each new market data event. 
				//See Help Guide for additional information.
				IsSuspendedWhileInactive					= true;
				OverEvColor									= Brushes.Fuchsia;
				UnderEvColor								= Brushes.Aqua;
				AddPlot(Brushes.White, "EvDivergences");
				AddPlot(new Stroke(Brushes.White, 2), PlotStyle.TriangleUp, "RealizedDivergences");
				AddPlot(Brushes.White, "yForZero");
				AddPlot(new Stroke(Brushes.White, 2), PlotStyle.TriangleDown, "LongRealizedDivergences");
			}
			else if (State == State.Configure)
			{
				AddDataSeries(Data.BarsPeriodType.Tick, 1);
			}
			
			else if (State == State.DataLoaded)
			{
			}
		}

		protected override void OnBarUpdate()
		{
			if (BarsInProgress == 0)
			{
				#region Check/Reset Data
				if (Bars.IsFirstBarOfSession)
				{
					Print("New Session");
					cumulativeDivergences = 0;
					countSessionBars = 0;
					adjustedCumulativeVolume = 0;
					cumulativeDelta = 0;
					cumulativeVolume = 0;
					sessionDivergenceValue = 0;
				}

				if (CurrentBar < 1)
					return;
				
	//			saveSessionCount = countSessionBars;
	//			if (saveSessionCount == countSessionBars)
				if (BarsInProgress == 0)
					countSessionBars = countSessionBars + 1;
				#endregion
				
				#region Volumetric Setup
				if (Bars == null)
	          		return;
		        NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType barsType = Bars.BarsSeries.BarsType as    
		        NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType;
		        if (barsType == null)
		          	return;
				#endregion
				
				#region Get Divergence Percent
				Print(Count);
				loadedBars = Count - 2;
				if (lockCount == 0 && CurrentBars[0] == loadedBars)
				{
					i = 0;
					loadedDivergences = 0;
					Print("Loaded Bars1: " + loadedBars.ToString());
					while (i < loadedBars)
					{
						tracker = loadedBars - (loadedBars - i);
						Print("Tracker: " + tracker.ToString());
						Print("Checking Bar: " + (tracker + 1).ToString());
						delta = barsType.Volumes[tracker + 1].BarDelta;
						Print("Delta: " + delta.ToString());
						Print("Close: " + Close[loadedBars - i-1].ToString());
						if (((Close[loadedBars - i-1] > Open[loadedBars - i-1]) && (delta < 0))
							|| ((Close[loadedBars - i-1] < Open[loadedBars - i-1]) && (delta > 0)))
						{
							loadedDivergences = loadedDivergences + 1;
						}
						i = i + 1;
					}
					
					lockCount = lockCount + 1;
					expectedDivergencePct = loadedDivergences*100 / loadedBars;
					
					Print("Loaded Divergences: " + loadedDivergences.ToString());
					Print("Loaded Bars2: " + loadedBars.ToString());
					Print("DivPct: " + expectedDivergencePct.ToString());
				}
				#endregion
				
				#region Bar Direction
				if (Close[0] > Open[0])
				{
					isUpBar = true;
					isDownBar = false;
					isDoji = false;
				}
				
				else if (Close[0] < Open[0])
				{
					isUpBar = false;
					isDownBar = true;
					isDoji = false;
				}
				
				else
				{
					isUpBar = false;
					isDownBar = false;
					isDoji = true;
				}
				#endregion
				
				#region Delta Tracking
				delta = barsType.Volumes[CurrentBar].BarDelta;
				
				if (delta >= 0)
				{
					isPosDelta = true;
					isNegDelta = false;
				}

				else
				{
					isPosDelta = false;
					isNegDelta = true;
				}
				#endregion
				
				#region Calculate and Plot
				cumulativeDelta = OrderFlowCumulativeDelta(CumulativeDeltaType.BidAsk, CumulativeDeltaPeriod.Session, 0).DeltaClose[0];
				cumulativeVolume = cumulativeVolume + VOL()[0];
				if ((isUpBar && isNegDelta)
					|| (isDownBar && isPosDelta))
				{
					cumulativeDivergences = cumulativeDivergences + 1;
				}	
				Print(expectedDivergencePct);
				sessionDivergenceValue = (countSessionBars*.17) - cumulativeDivergences; // 17 for ES, 19 for NQ
				shortOutcome = cumulativeDelta + (sessionDivergenceValue * Math.Pow(.005*cumulativeDelta, 2));
				longOutcome = cumulativeDelta - (sessionDivergenceValue * Math.Pow(.005*cumulativeDelta, 2));
				outcome = cumulativeDelta + (sessionDivergenceValue * Math.Pow(.005*cumulativeDelta, 2));//////
				
				EvDivergences[0] = cumulativeDelta;
				RealizedDivergences[0] = shortOutcome;
				LongRealizedDivergences[0] = longOutcome;

				if (prevPlotValues.Count() > 0)
				{
					if (outcome > cumulativeDelta)
					{
						PlotBrushes[1][0] = UnderEvColor;
						PlotBrushes[3][0] = UnderEvColor;
					}
					else if (outcome < cumulativeDelta)
					{
						PlotBrushes[1][0] = OverEvColor;
						PlotBrushes[3][0] = OverEvColor;
					}
					else
					{
						PlotBrushes[1][0] = PlotBrushes[1][1];
						PlotBrushes[3][0] = PlotBrushes[3][1];
					}
				}
				
				if (prevCumulativeDeltaValues.Count() > 0)
				{
					if (cumulativeDelta > prevCumulativeDeltaValues.Max())
						PlotBrushes[0][0] = Brushes.LimeGreen;
					else if (cumulativeDelta < prevCumulativeDeltaValues.Min())
						PlotBrushes[0][0] = Brushes.Red;
					else
						PlotBrushes[0][0] = PlotBrushes[0][1];
				}
				
				
				prevPlotValues.Add(outcome);
				prevCumulativeDeltaValues.Add(cumulativeDelta);
				if (prevPlotValues.Count() >= 10)
				{
					prevPlotValues.RemoveAt(0);
				}
				
				if (prevCumulativeDeltaValues.Count() >= 10)
				{
					prevCumulativeDeltaValues.RemoveAt(0);
				}
				
				
				yForZero[0] = 0;
				#endregion
			}

			
		}

		#region Properties
		[NinjaScriptProperty]
		[XmlIgnore]
		[Display(Name="OverEvColor", Order=1, GroupName="Parameters")]
		public Brush OverEvColor
		{ get; set; }

		[Browsable(false)]
		public string OverEvColorSerializable
		{
			get { return Serialize.BrushToString(OverEvColor); }
			set { OverEvColor = Serialize.StringToBrush(value); }
		}			

		[NinjaScriptProperty]
		[XmlIgnore]
		[Display(Name="UnderEvColor", Order=2, GroupName="Parameters")]
		public Brush UnderEvColor
		{ get; set; }

		[Browsable(false)]
		public string UnderEvColorSerializable
		{
			get { return Serialize.BrushToString(UnderEvColor); }
			set { UnderEvColor = Serialize.StringToBrush(value); }
		}			

		[Browsable(false)]
		[XmlIgnore]
		public Series<double> EvDivergences
		{
			get { return Values[0]; }
		}
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> RealizedDivergences
		{
			get { return Values[1]; }
		}
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> yForZero
		{
			get { return Values[2]; }
		}
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> LongRealizedDivergences
		{
			get { return Values[3]; }
		}
		#endregion

	}
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private BeckFlows.CumulativeDivergences[] cacheCumulativeDivergences;
		public BeckFlows.CumulativeDivergences CumulativeDivergences(Brush overEvColor, Brush underEvColor)
		{
			return CumulativeDivergences(Input, overEvColor, underEvColor);
		}

		public BeckFlows.CumulativeDivergences CumulativeDivergences(ISeries<double> input, Brush overEvColor, Brush underEvColor)
		{
			if (cacheCumulativeDivergences != null)
				for (int idx = 0; idx < cacheCumulativeDivergences.Length; idx++)
					if (cacheCumulativeDivergences[idx] != null && cacheCumulativeDivergences[idx].OverEvColor == overEvColor && cacheCumulativeDivergences[idx].UnderEvColor == underEvColor && cacheCumulativeDivergences[idx].EqualsInput(input))
						return cacheCumulativeDivergences[idx];
			return CacheIndicator<BeckFlows.CumulativeDivergences>(new BeckFlows.CumulativeDivergences(){ OverEvColor = overEvColor, UnderEvColor = underEvColor }, input, ref cacheCumulativeDivergences);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.BeckFlows.CumulativeDivergences CumulativeDivergences(Brush overEvColor, Brush underEvColor)
		{
			return indicator.CumulativeDivergences(Input, overEvColor, underEvColor);
		}

		public Indicators.BeckFlows.CumulativeDivergences CumulativeDivergences(ISeries<double> input , Brush overEvColor, Brush underEvColor)
		{
			return indicator.CumulativeDivergences(input, overEvColor, underEvColor);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.BeckFlows.CumulativeDivergences CumulativeDivergences(Brush overEvColor, Brush underEvColor)
		{
			return indicator.CumulativeDivergences(Input, overEvColor, underEvColor);
		}

		public Indicators.BeckFlows.CumulativeDivergences CumulativeDivergences(ISeries<double> input , Brush overEvColor, Brush underEvColor)
		{
			return indicator.CumulativeDivergences(input, overEvColor, underEvColor);
		}
	}
}

#endregion
