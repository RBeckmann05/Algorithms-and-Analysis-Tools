#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Indicators in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Indicators.BeckFlows
{
	public class Beckmentum : Indicator
	{
		
		List<double> maximumMAPrices = new List<double>();
		List<double> SMAPrices = new List<double>();
		List<double> barDeltas = new List<double>();
		List<double> deltaPercents = new List<double>();
		List<double> sessionOutputs = new List<double>();
		List<double> cumulativeOutputs = new List<double>();
		double cumulativeOutput, cumulativeOutputAverage = 0;
		double maximumMAVolume, maximumMAPrice, barDelta, deltaPct = 0;
		double sessionOutputAverage, stdReturnValue, stdVariance, stdAbove, stdBelow = 0;
		double SMA, MMA, DPA = 0;
		double output = 0;
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Indicator here.";
				Name										= "Beckmentum";
				Calculate									= Calculate.OnBarClose;
				IsOverlay									= false;
				DisplayInDataBox							= true;
				DrawOnPricePanel							= true;
				DrawHorizontalGridLines						= true;
				DrawVerticalGridLines						= true;
				PaintPriceMarkers							= true;
				ScaleJustification							= NinjaTrader.Gui.Chart.ScaleJustification.Right;
				//Disable this property if your indicator requires custom values that cumulate with each new market data event. 
				//See Help Guide for additional information.
				IsSuspendedWhileInactive					= true;
				
				period										= 10;
				stdMultiplier								= 3;
				
				AddPlot(new Stroke(Brushes.White, 2), PlotStyle.Bar, "OutputPlot");
				AddPlot(new Stroke(Brushes.White, 1), PlotStyle.Line, "stdAbovePlot");
				AddPlot(new Stroke(Brushes.White, 1), PlotStyle.Line, "stdBelowPlot");
			}
			else if (State == State.Configure)
			{
			}
		}

		protected override void OnBarUpdate()
		{
			#region Data Loaded Check
			if (CurrentBar < 10)
				return;
			#endregion
			
			#region Volumetric Setup
			if (Bars == null)
          		return;
	        NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType barsType = Bars.BarsSeries.BarsType as    
	        NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType;
	        if (barsType == null)
	          	return;
			#endregion
			
			if (Bars.IsFirstBarOfSession && BarsInProgress == 0)
			{
				sessionOutputs.Clear();
				cumulativeOutput = 0;
				cumulativeOutputs.Clear();
			}
			
			if (BarsInProgress == 0)
			{
				#region Trend Calculation
				maximumMAVolume = barsType.Volumes[CurrentBar].GetMaximumVolume(null, out maximumMAPrice);
				deltaPct = barsType.Volumes[CurrentBar].GetDeltaPercent();
				deltaPercents.Add(deltaPct);
				maximumMAPrices.Add(maximumMAPrice);
				SMAPrices.Add(Close[0]);
				
				if (maximumMAPrices.Count() > period)
					maximumMAPrices.RemoveAt(0);
				if (SMAPrices.Count() > period)
					SMAPrices.RemoveAt(0);
				if (deltaPercents.Count() > period)
					deltaPercents.RemoveAt(0);
				
				SMA = SMAPrices.Sum() / SMAPrices.Count();
				MMA = maximumMAPrices.Sum() / maximumMAPrices.Count();
				DPA = Math.Abs(deltaPercents.Sum() / deltaPercents.Count());
				output = (SMA - MMA) * DPA;
				cumulativeOutput = cumulativeOutput + output;
				cumulativeOutputs.Add(cumulativeOutput);
				sessionOutputs.Add(output);
				#endregion
				
				#region Standard Deviation Calculation
				Print("STD Calculation");
				sessionOutputAverage = cumulativeOutputs.Sum() / cumulativeOutputs.Count();
				stdReturnValue = cumulativeOutputs.Sum(v => Math.Pow(v - cumulativeOutputAverage, 2)) / cumulativeOutputs.Count();
				stdVariance = Math.Sqrt(stdReturnValue);
				stdAbove = cumulativeOutputAverage + (stdVariance * stdMultiplier);
				stdBelow = cumulativeOutputAverage - (stdVariance * stdMultiplier);
				#endregion
				
				#region Plots
				Print("Plotting");
				OutputPlot[0] = cumulativeOutput; // error here
				if (output >= 0)
					PlotBrushes[0][0] = Brushes.Green;
				else if (output < 0)
					PlotBrushes[0][0] = Brushes.Red;
				if (cumulativeOutput > stdAbove)
					PlotBrushes[0][0] = Brushes.Magenta;
				if (cumulativeOutput < stdBelow)
					PlotBrushes[0][0] = Brushes.Cyan;
				stdAbovePlot[0] = stdAbove;
				stdBelowPlot[0] = stdBelow;
				#endregion
			}
		}
		
		#region Properties
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="period", Order=1, GroupName="Moving Average")]
		public int period
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(0, int.MaxValue)]
		[Display(Name="stdMultiplier", Order=2, GroupName="Moving Average")]
		public double stdMultiplier
		{ get; set; }
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> OutputPlot
		{
			get { return Values[0]; }
		}
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> stdAbovePlot
		{
			get { return Values[1]; }
		}
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> stdBelowPlot
		{
			get { return Values[2]; }
		}
		#endregion
		
	}
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private BeckFlows.Beckmentum[] cacheBeckmentum;
		public BeckFlows.Beckmentum Beckmentum(int period, double stdMultiplier)
		{
			return Beckmentum(Input, period, stdMultiplier);
		}

		public BeckFlows.Beckmentum Beckmentum(ISeries<double> input, int period, double stdMultiplier)
		{
			if (cacheBeckmentum != null)
				for (int idx = 0; idx < cacheBeckmentum.Length; idx++)
					if (cacheBeckmentum[idx] != null && cacheBeckmentum[idx].period == period && cacheBeckmentum[idx].stdMultiplier == stdMultiplier && cacheBeckmentum[idx].EqualsInput(input))
						return cacheBeckmentum[idx];
			return CacheIndicator<BeckFlows.Beckmentum>(new BeckFlows.Beckmentum(){ period = period, stdMultiplier = stdMultiplier }, input, ref cacheBeckmentum);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.BeckFlows.Beckmentum Beckmentum(int period, double stdMultiplier)
		{
			return indicator.Beckmentum(Input, period, stdMultiplier);
		}

		public Indicators.BeckFlows.Beckmentum Beckmentum(ISeries<double> input , int period, double stdMultiplier)
		{
			return indicator.Beckmentum(input, period, stdMultiplier);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.BeckFlows.Beckmentum Beckmentum(int period, double stdMultiplier)
		{
			return indicator.Beckmentum(Input, period, stdMultiplier);
		}

		public Indicators.BeckFlows.Beckmentum Beckmentum(ISeries<double> input , int period, double stdMultiplier)
		{
			return indicator.Beckmentum(input, period, stdMultiplier);
		}
	}
}

#endregion
