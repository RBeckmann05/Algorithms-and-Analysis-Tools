#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Indicators in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Indicators.BeckFlows
{
	public class DeltaMACrossoverVisual : Indicator
	{
		List<double> sessionCumulativeDeltaValues = new List<double>();
		List<double> slowCumulativeDeltaValues = new List<double>();
		List<double> fastCumulativeDeltaValues = new List<double>();
		
		double cumulativeDelta = 0;
		double slowPriceEma = 0;
		double fastPriceEma = 0;
		double sessionDeltaAverage = 0;
		double stdReturnValue = 0;
		double stdVariance = 0;
		double stdAbove = 0;
		double stdBelow = 0;
		double slowDeltaAverage = 0;
		double fastDeltaAverage = 0;
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Indicator here.";
				Name										= "DeltaMACrossoverVisual";
				Calculate									= Calculate.OnEachTick;
				IsOverlay									= false;
				DisplayInDataBox							= true;
				DrawOnPricePanel							= true;
				DrawHorizontalGridLines						= true;
				DrawVerticalGridLines						= true;
				PaintPriceMarkers							= true;
				ScaleJustification							= NinjaTrader.Gui.Chart.ScaleJustification.Right;
				//Disable this property if your indicator requires custom values that cumulate with each new market data event. 
				//See Help Guide for additional information.
				IsSuspendedWhileInactive					= true;
				
				deltaStdMultiplier							= 1;
				meanLookback								= 0;
				
				AddPlot(Brushes.Blue, "plotMeanDelta");
				AddPlot(Brushes.White, "plotStdAbove");
				AddPlot(Brushes.White, "plotStdBelow");
			}
			else if (State == State.Configure)
			{
				AddDataSeries(Data.BarsPeriodType.Tick, 1);
			}
		}

		protected override void OnBarUpdate()
		{
			if (CurrentBar < 2)
				return;
			
			if (Bars.IsFirstBarOfSession && IsFirstTickOfBar && BarsInProgress == 0)
			{
				
				#region New Session Clearing
				sessionCumulativeDeltaValues.Clear();
				#endregion /// Hide when recording
				
			}
			
			if (IsFirstTickOfBar && BarsInProgress == 0)
			{
				
				#region Collect Data
				cumulativeDelta = OrderFlowCumulativeDelta(CumulativeDeltaType.BidAsk, CumulativeDeltaPeriod.Session, 0).DeltaClose[1];
				sessionCumulativeDeltaValues.Add(cumulativeDelta);
				#endregion /// Hide when recording
				
				#region Session Delta Mean
				sessionDeltaAverage = sessionCumulativeDeltaValues.Sum() / sessionCumulativeDeltaValues.Count();
				stdReturnValue = sessionCumulativeDeltaValues.Sum(v => Math.Pow(v - sessionDeltaAverage, 2)) / sessionCumulativeDeltaValues.Count();
				stdVariance = Math.Sqrt(stdReturnValue);
				stdAbove = sessionDeltaAverage + (stdVariance * deltaStdMultiplier);
				stdBelow = sessionDeltaAverage - (stdVariance * deltaStdMultiplier);
				#endregion /// Hide when recording
				
				#region Plot Data
				plotMeanDelta[1] = sessionDeltaAverage;
				plotStdAbove[1] = stdAbove;
				plotStdBelow[1] = stdBelow;
				#endregion
			}
			
			if (Bars.IsFirstBarOfSession && IsFirstTickOfBar && BarsInProgress == 0)
				sessionCumulativeDeltaValues.RemoveAt(0);
			
			if ((IsFirstTickOfBar && BarsInProgress == 0 && sessionCumulativeDeltaValues.Count() > meanLookback)
				&& (meanLookback != 0))
				sessionCumulativeDeltaValues.RemoveAt(0);
				
		}
		
		#region Properties
		[NinjaScriptProperty]
		[Range(0, int.MaxValue)]
		[Display(Name="deltaStdMultiplier", Order=1, GroupName="Set Defaults")]
		public double deltaStdMultiplier
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(0, int.MaxValue)]
		[Display(Name="meanLookback", Order=2, GroupName="Set Defaults")]
		public double meanLookback
		{ get; set; }
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> plotMeanDelta
		{
			get { return Values[0]; }
		}
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> plotStdAbove
		{
			get { return Values[1]; }
		}
		
		[Browsable(false)]
		[XmlIgnore]
		public Series<double> plotStdBelow
		{
			get { return Values[2]; }
		}
		#endregion
		
	}
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private BeckFlows.DeltaMACrossoverVisual[] cacheDeltaMACrossoverVisual;
		public BeckFlows.DeltaMACrossoverVisual DeltaMACrossoverVisual(double deltaStdMultiplier, double meanLookback)
		{
			return DeltaMACrossoverVisual(Input, deltaStdMultiplier, meanLookback);
		}

		public BeckFlows.DeltaMACrossoverVisual DeltaMACrossoverVisual(ISeries<double> input, double deltaStdMultiplier, double meanLookback)
		{
			if (cacheDeltaMACrossoverVisual != null)
				for (int idx = 0; idx < cacheDeltaMACrossoverVisual.Length; idx++)
					if (cacheDeltaMACrossoverVisual[idx] != null && cacheDeltaMACrossoverVisual[idx].deltaStdMultiplier == deltaStdMultiplier && cacheDeltaMACrossoverVisual[idx].meanLookback == meanLookback && cacheDeltaMACrossoverVisual[idx].EqualsInput(input))
						return cacheDeltaMACrossoverVisual[idx];
			return CacheIndicator<BeckFlows.DeltaMACrossoverVisual>(new BeckFlows.DeltaMACrossoverVisual(){ deltaStdMultiplier = deltaStdMultiplier, meanLookback = meanLookback }, input, ref cacheDeltaMACrossoverVisual);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.BeckFlows.DeltaMACrossoverVisual DeltaMACrossoverVisual(double deltaStdMultiplier, double meanLookback)
		{
			return indicator.DeltaMACrossoverVisual(Input, deltaStdMultiplier, meanLookback);
		}

		public Indicators.BeckFlows.DeltaMACrossoverVisual DeltaMACrossoverVisual(ISeries<double> input , double deltaStdMultiplier, double meanLookback)
		{
			return indicator.DeltaMACrossoverVisual(input, deltaStdMultiplier, meanLookback);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.BeckFlows.DeltaMACrossoverVisual DeltaMACrossoverVisual(double deltaStdMultiplier, double meanLookback)
		{
			return indicator.DeltaMACrossoverVisual(Input, deltaStdMultiplier, meanLookback);
		}

		public Indicators.BeckFlows.DeltaMACrossoverVisual DeltaMACrossoverVisual(ISeries<double> input , double deltaStdMultiplier, double meanLookback)
		{
			return indicator.DeltaMACrossoverVisual(input, deltaStdMultiplier, meanLookback);
		}
	}
}

#endregion
