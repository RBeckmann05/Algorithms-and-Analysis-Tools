#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class ORB : Strategy
	{
		#region Basic Strategy
		double openHigh, openLow = 0;
		bool breakoutLong, breakoutShort = false;
		double longTickProfit, shortTickProfit = 0;
		bool stopTC = false;
		bool longBreakoutSearch, shortBreakoutSearch = false;
		bool disableSession = false;
		double dailyAtr = 0;
		#endregion
		
		#region Relative Volume
		List<double> relVolValues = new List<double>();
		double relVol, relVolAvg, openVol = 0;
		#endregion
		
		int entryQuantity = 0;
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Strategy here.";
				Name										= "ORB";
				Calculate									= Calculate.OnEachTick;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= true;
				
				rewardRisk									= 10;
				useRelativeVolume							= false;
				useAtrStop									= true;
				useAutoScale								= true;
				currentPnL									= 0;
				atrPerc										= .1;
			}
			else if (State == State.Configure)
			{
				AddDataSeries(null, BarsPeriodType.Tick, 1);
				AddDataSeries(null, BarsPeriodType.Day, 1);
			}
		}

		protected override void OnBarUpdate() // create bollinger band distance / atr for regime filtering, see how that compares with profits
		{
			#region Data Check
			if (CurrentBars[0] < 2)
				return;
			if (CurrentBars[1] < 2)
				return;
			if (CurrentBars[2] < 2)
				return;
			#endregion
			
			#region Data Clearing
			if (BarsInProgress == 0 && Bars.IsFirstBarOfSession)
			{
				longBreakoutSearch = false;
				shortBreakoutSearch = false;
			}
			#endregion
			
			if (BarsInProgress == 2 && IsFirstTickOfBar)
				dailyAtr = ATR(BarsArray[2], 14)[1];
			
			if (BarsInProgress == 0 && IsFirstTickOfBar)
			{
				#region Time Check
				if ((Times[0][0].TimeOfDay > new TimeSpan(8, 39, 0))
					&& (Times[0][0].TimeOfDay < new TimeSpan(8, 41, 0)))
				{
					#region Entry Price Location
					openHigh = Highs[0][1];
					openLow = Lows[0][1];
					longBreakoutSearch = false;
					shortBreakoutSearch = false;
					if (Closes[0][1] > Opens[0][1])
						longBreakoutSearch = true;
					else if (Closes[0][1] < Opens[0][1])
						shortBreakoutSearch = true;
					#endregion
					
					#region Relative Volume
					openVol = VOL()[1];
					relVolAvg = relVolValues.Sum() / relVolValues.Count();
					relVol = openVol/relVolAvg;
					if (relVol < 1 && useRelativeVolume)
						disableSession = true;
					else				
						disableSession = false;
					relVolValues.Add(openVol);
					if (relVolValues.Count() > 14)
						relVolValues.RemoveAt(0);
					#endregion
				}
				#endregion
			}
			
			if (BarsInProgress == 0 && !disableSession)
			{
				#region Calculation
				breakoutLong = false;
				breakoutShort = false;
				if (longBreakoutSearch 
					&& (Highs[0][0] != openHigh 
					|| Lows[0][0] != openLow))
				{
					if (Closes[0][0] > openHigh)
					{
						breakoutLong = true;
						longBreakoutSearch = false;
					}
				}
				else if (shortBreakoutSearch 
					&& (Highs[0][0] != openHigh 
					|| Lows[0][0] != openLow))
				{
					if (Closes[0][0] < openLow)
					{
						breakoutShort = true;
						shortBreakoutSearch = false;
					}
				}
				#endregion
					
				#region Order Execution/Management
				if (breakoutLong)
				{
					longTickProfit = (Closes[0][0] - (openLow - TickSize))*rewardRisk*(1/TickSize);
					if (useAtrStop)
						SetStopLoss(CalculationMode.Price, Closes[0][0] - dailyAtr*atrPerc);
					else
					{
						SetStopLoss(CalculationMode.Price, openLow-TickSize);
						SetProfitTarget(CalculationMode.Ticks, longTickProfit);
					}
					EnterLongLimit(1, true, entryQuantity, Closes[0][0], "Enter Limit Long");
					disableSession = true;
					Print("Entered " + entryQuantity.ToString() + " Long: " + Time[0].ToString());
				}
				else if (breakoutShort)
				{
					shortTickProfit = ((openHigh+TickSize) - Closes[0][0])*rewardRisk*(1/TickSize);
					if (useAtrStop)
						SetStopLoss(CalculationMode.Price, Closes[0][0] + dailyAtr*atrPerc);
					else
					{
						SetStopLoss(CalculationMode.Price, openHigh+TickSize);
						SetProfitTarget(CalculationMode.Ticks, shortTickProfit);
					}
					EnterShortLimit(1, true, entryQuantity, Closes[0][0], "Enter Limit Short");
					disableSession = true;
					Print("Entered " + entryQuantity.ToString() + " Short: " + Time[0].ToString());
				}
				#endregion
			}
			
			#region EOD Exit
			if (Times[0][0].TimeOfDay > new TimeSpan(14, 59, 59))
			{
				if (Position.MarketPosition == MarketPosition.Long)
				{
					ExitLong();
				}
				else if (Position.MarketPosition == MarketPosition.Short)
				{
					ExitLong();
				}
			}
			#endregion
		}
		
		protected override void OnPositionUpdate(Position position, double averagePrice, int quantity, MarketPosition marketPosition)
		{
			if (Position.MarketPosition == MarketPosition.Flat && SystemPerformance.AllTrades.Count > 0)
			{
				currentPnL += SystemPerformance.AllTrades[SystemPerformance.AllTrades.Count - 1].ProfitCurrency;
				currentPnL = Math.Round(currentPnL, 2);
				PrintTo = PrintTo.OutputTab2;
				Print(Time[0].ToString() + " PnL: " + currentPnL.ToString());
				PrintTo = PrintTo.OutputTab1;
				
				if (useAutoScale)
					entryQuantity = (int)Math.Max(1, Math.Round(currentPnL/30000));
				else
					entryQuantity = 1;
			}
		}
		
		#region Properties
		[NinjaScriptProperty]
		[Range(0, int.MaxValue)]
		[Display(Name="rewardRisk", Order=1, GroupName="Strategy Settings")]
		public double rewardRisk
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name="useRelativeVolume", Order=2, GroupName="Strategy Settings")]
		public bool useRelativeVolume
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name="useAtrStop", Order=3, GroupName="Strategy Settings")]
		public bool useAtrStop
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(0, int.MaxValue)]
		[Display(Name="atrPerc", Order=4, GroupName="Strategy Settings")]
		public double atrPerc
		{ get; set; }
		
		[NinjaScriptProperty]
		[Display(Name="useAutoScale", Order=1, GroupName="Auto Scale")]
		public bool useAutoScale
		{ get; set; }
		
		[NinjaScriptProperty]
		[Range(0, int.MaxValue)]
		[Display(Name="currentPnL", Order=2, GroupName="Auto Scale")]
		public double currentPnL
		{ get; set; }
		#endregion
	}
}
